; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "SunBird-Installer"
#define MyAppVersion "1.8"
#define MyAppPublisher "Diksha"
#define MyAppURL "https://diksha.gov.in"
[Messages]
DiskSpaceWarning= Setup requires Minimum 10GB of space. Do you wish to continue?
DiskSpaceMBLabel= Minimum 10GB of space is required. 

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{D3CCD86A-F15B-4825-9793-13398F726A00}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
OutputBaseFilename=SunbirdInstaller
Compression=lzma
SolidCompression=yes
MinVersion=6.1.7600
ExtraDiskSpaceRequired=10737418240




[Code]
procedure ExitProcess(uExitCode: UINT);
  external 'ExitProcess@kernel32.dll stdcall';

function IsEnoughFreeSpace(const Path: string; MinSpace: Cardinal): Boolean;
var
  FreeSpace, TotalSpace: Cardinal;
begin
  // the second parameter set to True means that the function operates with
  // megabyte units; if you set it to False, it will operate with bytes; by
  // the chosen units you must reflect the value of the MinSpace paremeter
  if GetSpaceOnDisk(Path, True, FreeSpace, TotalSpace) then
    Result := FreeSpace >= MinSpace
  else
    RaiseException('Failed to check free space.');
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
  Result := True;

  if CurPageID = wpSelectDir then
  begin
    // the second parameter in this function call is the expected min. space in
    // units specified by the commented parameter above; in this example we are
    // checking if there's at least 1 MB of free space on drive of the selected
    // directory; we need to extract a drive portion of the selected directory,
    // because it's probable that the directory won't exist yet when we check
    if not IsEnoughFreeSpace(ExtractFileDrive(WizardDirValue), 1) then
    begin
      MsgBox('There is not enough space on drive of the selected directory. ' +
        'Setup will now exit.', mbCriticalError, MB_OK);
      // in this input parameter you can pass your own exit code which can have
      // some meaningful value indicating that the setup process exited because
      // of the not enough space reason
      ExitProcess(666);
    end;
  end;
end;


[Code]
type
  { the following mapping of the DWORDLONG data type is wrong; }
  { the correct type is a 64-bit unsigned integer which is not }
  { available in InnoSetup Pascal Script at this time, so max. }
  { values of the following fields will be limited to quite a }
  { big reserve of 8589,934.592 GB of RAM; I hope enough for }
  { the next versions of Windows :-) }
  DWORDLONG = Int64;
  TMemoryStatusEx = record
    dwLength: DWORD;
    dwMemoryLoad: DWORD;
    ullTotalPhys: DWORDLONG;
    ullAvailPhys: DWORDLONG;
    ullTotalPageFile: DWORDLONG;
    ullAvailPageFile: DWORDLONG;
    ullTotalVirtual: DWORDLONG;
    ullAvailVirtual: DWORDLONG;
    ullAvailExtendedVirtual: DWORDLONG;
  end;

function GlobalMemoryStatusEx(var lpBuffer: TMemoryStatusEx): BOOL;
  external 'GlobalMemoryStatusEx@kernel32.dll stdcall';

function InitializeSetup: Boolean;
var
  MemoryStatus: TMemoryStatusEx;
begin
  { allow the installation (even if the GlobalMemoryStatusEx call fails) }
  Result := True;
  { that's the requirement of the function call; you must set the size }
  { of the passed structure in bytes }
  MemoryStatus.dwLength := SizeOf(MemoryStatus);
  { if the GlobalMemoryStatusEx function call succeed, then... }
  if GlobalMemoryStatusEx(MemoryStatus) then
  begin
    {MsgBox(Int64ToStr(MemoryStatus.ullTotalPhys), mbInformation, MB_OK);}

    { if the amount of actual physical memory in bytes is less than }
    { 1073,741.824 B (1 GB), then show a warning message and according }
    { to user's decision abort the installation }
    if MemoryStatus.ullTotalPhys < 1825361100 then
    begin
      if MsgBox('You have less than 2GB of physical memory available. ' +
        'Are you sure you want to continue with the installation ?', 
        mbConfirmation, MB_YESNO) = IDNO
      then
        Result := False;
    end;
  end;
end;


[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
// ADD THE LOCATION OF ALL THE FILES IN THE FILES SECTION
[Files]
Source: "C:\Users\OPT-LT-046\Desktop\Diksha\apache-couchdb-2.3.1.msi"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Users\OPT-LT-046\Desktop\Diksha\Diksha-1.0.0.msi"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Users\OPT-LT-046\Desktop\Diksha\install.bat"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Users\OPT-LT-046\Desktop\Diksha\uninstall.bat"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Run]
Filename: "{app}\install.bat"; Parameters: "install"; Flags: runhidden

[UninstallRun]
Filename: "{app}\uninstall.bat"; Flags: runhidden